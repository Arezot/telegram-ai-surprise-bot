### telegram_ai_surprise_bot/bot.py

from telegram import Update, LabeledPrice
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import random
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
PRIZES = ["–ö—Ä—É–∂–∫–∞", "–§—É—Ç–±–æ–ª–∫–∞", "–ù–∞–∫–ª–µ–π–∫–∞", "–ù–∏—á–µ–≥–æ üòÖ", "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–∑"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –≤–≤–µ–¥–∏ /buy, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Å—é—Ä–ø—Ä–∏–∑-–±–æ–∫—Å.")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text

    response = openai.ChatCompletion.create(
        model="openchat/openchat-3.5-1210",
        messages=[{"role": "user", "content": user_message}]
    )

    reply = response["choices"][0]["message"]["content"]
    await update.message.reply_text(reply)

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = [LabeledPrice("–°—é—Ä–ø—Ä–∏–∑ –±–æ–∫—Å", 10000)]  # 100 —Ä—É–±–ª–µ–π (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
    await context.bot.send_invoice(
        chat_id=update.message.chat_id,
        title="–°—é—Ä–ø—Ä–∏–∑ –±–æ–∫—Å",
        description="–û–ø–ª–∞—Ç–∏ –∏ –ø–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑!",
        payload="surprise-box",
        provider_token=os.getenv("PAYMENT_PROVIDER_TOKEN"),
        currency="RUB",
        prices=prices,
        start_parameter="buy-surprise"
    )

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prize = random.choice(PRIZES)
    await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª–æ: {prize}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling()
